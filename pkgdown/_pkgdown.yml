url: https://stocnet.github.io/manynet/
development:
    mode: auto
template:
  bootswatch: superhero
authors:
  James Hollway:
    href: https://jameshollway.com
navbar:
  structure:
    left:
    - home
    - intro
    - reference
    - news
    right:
    - search
    - github
    - cran
  components:
    home:
      icon: fa-home fa-lg
      href: index.html
      aria-label: Go to home
    reference:
      text: Function Overview
      href: reference/index.html
    news:
      text: News
      href: news/index.html
    github:
      icon: "fab fa-github fa-lg"
      href: https://github.com/stocnet/manynet
      aria-label: View on Github
    cran:
      icon: "fab fa-r-project"
      href: https://cloud.r-project.org/package=manynet
      aria-label: View on CRAN
reference:
  - title: "Making"
    desc: |
      Making functions help you obtain networks from inside or outside the package.
  - subtitle: "Importing"
    desc: |
      Functions for importing and exporting networks from and to a range
      of external formats.
    contents:
      - starts_with("read_")
      - starts_with("write_")
  - subtitle: "Inventing"
    desc: |
      Functions for deterministically creating and stochastically generating 
      directed and undirected, one-mode and two-mode networks.
    contents:
      - make_explicit
      - make_create
      - starts_with("generate_")
  - subtitle: "Playing"
    desc: |
      Functions for simulating diffusion or learning processes,
      i.e. nodal change, upon networks.
    contents:
      - starts_with("play_")
      
  - title: "Modifying"
    desc: |
      Functions for modifying networks into other classes or formats,
      or modifying their properties or attributes.
      This includes functions for reformatting networks into networks
      of the same dimensions but a different type, e.g. from directed to undirected.
      It also includes functions for transforming networks into networks
      with other dimensions, such as from a two-mode network into a one-mode network.
      There are also functions for splitting networks, e.g. into a list of ego networks,
      and rejoining them from such lists.
    contents:
      - starts_with("to_")
      - starts_with("from_")
  - subtitle: "Coercion"
    desc: |
      Functions for modifying networks into other classes.
    contents:
      - starts_with("as_")
  - subtitle: "Attributes"
    desc: |
      Functions for modifying nodal and tie attributes.
      These include tidy-style and igraph-style functions for adding or joining
      new data on nodes or ties to networks.
    contents:
      - starts_with("add_")
  - subtitle: "Converting"
    desc: |
      Functions for permuting networks or constructing a network
      from the nodal correlations of another network.
    contents:
      - manip_permutation
      - manip_correlation
  - subtitle: "Missing"
    desc: |
      Functions for modifying how missing data is treated.
    contents:
      - starts_with("na_to_")
      
  - title: "Mapping"
    desc: |
      Functions for plotting and visualising graphs of different types.
  - subtitle: "Graphing"
    desc: |
      Functions for graphing networks and plotting results.
      `graphr()` graphs any manynet-compatible class object automagically.
      `graphs()` and `grapht()` do the same for multiple networks
      and dynamic networks, respectively.
    contents:
      - starts_with("graph")
      - starts_with("layout")
  - subtitle: "Theming"
    desc: |
      Functions for tailoring graphs with themes, scales, and palettes.
    contents:
      - starts_with("theme")
      - starts_with("scale")
      - ends_with("palettes")

  - title: "Marking"
    desc: |
      Functions for identifying properties of networks, nodes, or ties,
      all returning logical scalars or vectors.
      Note that all `node_` and `tie_` measures return a single vector
      so that they can be added directly to graph objects.
      `net_` measures return one or, in some cases of two-mode measures,
      two values.
      All `node_` and `tie_` measures return a single vector,
      the length of the nodes or ties in the network, respectively.
    contents:
      - contains("is_")
  - title: "Measuring"
    desc: |
      Functions for measuring networks and returning a numeric vector or value.
      `net_` measures return one or, in some cases of two-mode measures,
      two values.
      All `node_` and `tie_` measures return a single vector,
      the length of the nodes or ties in the network, respectively.
    contents:
      - starts_with("measure_")
      - ends_with("_centrality")
      - over
  - title: "Motifs and Memberships"
    desc: |
      Motifs are functions for calculating network subgraphs,
      always return a matrix or table of nodes as rows and motif or other property as columns,
      and can be recognised by the `_by_` in the function name.
      Memberships are functions for identifying community, cluster, or class memberships,
      always return a string vector the length of the nodes in the network,
      and can be recognised by the `_in_` in the function name.
    contents:
      - contains("_by_")
      - contains("_in_")
  - title: "Methods"
    desc: "Methods used in other functions but documented here:"
    contents:
      - cluster
      - kselect
  - title: "Learning"
    desc: |
      Functions for loading and extracting code from tutorials.
      There is also a function for tabulating the various network data included in the package,
      providing an overview of their properties.
    contents:
      - ends_with("_tute")
  - title: "Practicing"
    desc: |
      The package contains a variety of networks useful for pedagogical purposes
      and used in the course 'Social Networks Theories and Methods' and other workshops.
      Each page documents the source of the data and its format.
      References are provided for further reading and citation.
    contents:
      - data_overview
      - starts_with("ison_")
  
